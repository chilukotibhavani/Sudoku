@page "/sudoku/{GamePin}"
@using System.Linq
@using MudBlazor
@using Microsoft.AspNetCore.SignalR.Client
@using SudokuGameApp.Services
@using SudokuGameApp.Hubs
@inject RoomService RoomService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@rendermode InteractiveServer

<div class="page-container @(isGameOver ? "game-over" : "")">

    <div class="all-player-scores">
        <h4>All Player Scores:</h4>
        <div class="player-scores-grid">
            @{
                int rank = 1;
            }
            @foreach (var playerScore in playerScores.OrderByDescending(s => s.Value))
            {
                <div class="player-score-cell @(playerScore.Key == PlayerName ? "current-player" : "")">
                    <span class="player-rank">@(rank++)</span>
                    <span class="player-name">@playerScore.Key</span>
                    <span class="player-score">Score: @playerScore.Value</span>
                </div>
            }
        </div>
    </div>
    <div class="game-container">
        <div class="game-stats">
            <div class="timer @(remainingTime.TotalMinutes <= 1 ? "timer-critical" : "")">
                Time left: @remainingTime.ToString(@"mm\:ss")
            </div>
            <div class="score">Score: @score</div>
            <div class="incorrect-count">Mistakes: @incorrectAnswersCount</div>
        </div>

        <div class="sudoku-grid">
            @for (int row = 0; row < 9; row++)
            {
                <div class="sudoku-row">
                    @for (int col = 0; col < 9; col++)
                    {
                        int currentRow = row;
                        int currentCol = col;
                        <input type="number"
                               min="1"
                               max="9"
                               value="@(board[row, col] == 0 ? "" : board[row, col].ToString())"
                               @oninput="@((e) => UpdateCell(currentRow, currentCol, e.Value.ToString()))"
                               class="sudoku-input @(originalCells[row, col] ? "default-number" : "") @(IsValid(row, col) ? "" : "invalid") @(completedPlayers.Contains(hubConnection.ConnectionId) ? "completed" : "")"
                               readonly="@(originalCells[row, col])" />
                    }
                </div>
            }
        </div>


        @if (isGameOver && !allPlayersCompleted)
        {
            <button class="custom-button start-new-game" @onclick="StartNewGame">Start New Game</button>

        }
        <div class="button-container">
            <button class="custom-button exit-game" @onclick="ExitGame">Exit Game</button>
        </div>


    </div>


    @if (showCompletionPopup)
    {
        <div class="popup-overlay">
            <div class="popup-content">
                <h3>@completionMessage</h3>
                <div class="all-scores">
                    <h4>All Player Scores:</h4>
                    @foreach (var score in playerScores.OrderByDescending(s => s.Value))
                    {
                        <div class="player-score">
                            <span class="player-name">@score.Key:</span>
                            <span class="score-value">@score.Value</span>
                        </div>
                    }
                </div>
                <button class="custom-button" @onclick="ContinueGame">OK</button>
            </div>
        </div>
    }

</div>


@if (showPopup)
{
    <div class="popup @(isCorrectAnswer ? "correct" : "incorrect")">
        <span class="emoji">
            @(isCorrectAnswer ? "🤩" : "😵")
        </span>
        <p>@(isCorrectAnswer ? "Correct!" : "Incorrect!")</p>
    </div>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(isSolved ? "alert-success" : "alert-danger")" role="alert">
        @message
    </div>
}

@code {
    [Parameter]
    public string GamePin { get; set; }
    public string PlayerName { get; set; }
    private int[,] board = new int[9, 9];
    private int[,] solution = new int[9, 9];
    private bool[,] incorrectCells = new bool[9, 9];
    private bool[,] originalCells = new bool[9, 9];
    private string message = "";
    private bool isSolved = false;
    private Random random = new Random();
    private DateTime startTime;
    private TimeSpan elapsedTime;
    private Timer timer;
    private Dictionary<string, string> Players { get; set; } = new Dictionary<string, string>();
    private int score = 0;
    private int incorrectAnswersCount = 0;
    private HubConnection hubConnection;
    private Dictionary<string, int> playerScores = new Dictionary<string, int>();

    private const int TIME_LIMIT_MINUTES = 10;
    private TimeSpan remainingTime;

    private bool showPopup = false;
    private bool isCorrectAnswer = false;


    private string completionMessage = "";
    private bool showCompletionPopup = false;
    private bool isGameOver = false;
    private bool allPlayersCompleted = false;
    private HashSet<string> completedPlayers = new HashSet<string>();
    private int totalPlayers = 0;
    private int completedPlayersCount = 0;

    protected override async Task OnInitializedAsync()
    {

        if (string.IsNullOrEmpty(PlayerName))
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("playerName", out var playerNameValue))
            {
                PlayerName = playerNameValue;
            }
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/sudokuHub"))
            .Build();

        hubConnection.On<string, int, int, int>("UpdateCell", (playerId, row, col, value) =>
        {
            if (playerId == hubConnection.ConnectionId)
            {
                board[row, col] = value;
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<string, int>("ReceiveScoreUpdate", (playerName, score) =>
       {
           playerScores[playerName] = score;
           InvokeAsync(StateHasChanged);
       });

        hubConnection.On<Dictionary<string, int>>("ReceiveAllScores", (scores) =>

        {

            playerScores = scores;

            InvokeAsync(StateHasChanged);

        });


        hubConnection.On<string>("PlayerCompleted", async (playerName) =>
       {
           await ShowCompletionPopup(playerName);
           await InvokeAsync(() =>
       {
           if (playerName == hubConnection.ConnectionId)
           {
               completedPlayers.Add(hubConnection.ConnectionId);
           }
           else
           {
               // Add the completed player to the list
               completedPlayers.Add(playerName);
           }
           StateHasChanged();
       });
       });

        hubConnection.On<int[]>("NewGame", (flattenedBoard) =>
        {
            board = new int[9, 9];
            for (int i = 0; i < 9; i++)
                for (int j = 0; j < 9; j++)
                    board[i, j] = flattenedBoard[i * 9 + j];

            solution = SolveSudoku((int[,])board.Clone());
            SetupNewGame();
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<int>("ReceiveTotalPlayers", (count) =>
        {
            totalPlayers = count;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("PlayerCompleted", async (playerName) =>
        {
            await ShowCompletionPopup(playerName);
            await InvokeAsync(() =>
     {
         completedPlayersCount++;
         if (playerName == hubConnection.ConnectionId)
         {
             completedPlayers.Add(hubConnection.ConnectionId);
         }
         else
         {
             completedPlayers.Add(playerName);
         }

         if (completedPlayersCount == totalPlayers)
         {
             allPlayersCompleted = true;
         }

         StateHasChanged();
     });
        });
        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinGame", GamePin, PlayerName);
        await hubConnection.SendAsync("RequestTotalPlayers", GamePin);
        await RequestAllScores();
        await hubConnection.SendAsync("RequestGameState", GamePin);
        await NewGame();

    }

    private async Task RequestAllScores()
    {
        await hubConnection.SendAsync("RequestAllScores", GamePin);
    }

    private void ContinueGame()
    {
        showCompletionPopup = false;
        StateHasChanged();
    }

    private async Task NewGame()
    {
        var newBoard = GenerateRandomSudoku();
        RemoveNumbers(newBoard, 40); // Remove 40 numbers to create the puzzle

        var flattenedBoard = new int[81];
        for (int i = 0; i < 9; i++)
            for (int j = 0; j < 9; j++)
                flattenedBoard[i * 9 + j] = newBoard[i, j];

        await hubConnection.SendAsync("NewGame", GamePin, flattenedBoard);
    }

    private async Task StartNewGame()
    {
        await NewGame();
        StateHasChanged();
    }

    private void SetupNewGame()
    {
        originalCells = new bool[9, 9];
        for (int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {
                originalCells[i, j] = board[i, j] != 0;
            }
        }

        message = "";
        isSolved = false;
        incorrectCells = new bool[9, 9];
        incorrectAnswersCount = 0;
        startTime = DateTime.Now;
        elapsedTime = TimeSpan.Zero;
        remainingTime = TimeSpan.FromMinutes(TIME_LIMIT_MINUTES);
        timer = new Timer(UpdateTimer, null, 0, 1000);
        score = 0;
        completedPlayers.Clear();
        isGameOver = false;
        allPlayersCompleted = false;
    }

    private void UpdateTimer(object state)
    {
        elapsedTime = DateTime.Now - startTime;
        remainingTime = TimeSpan.FromMinutes(TIME_LIMIT_MINUTES) - elapsedTime;

        if (remainingTime <= TimeSpan.Zero)
        {
            EndGame();
        }
        else
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task EndGame()
    {
        timer?.Dispose();
        message = "Time's up! Game over.";
        isSolved = false;
        completedPlayers.Add(hubConnection.ConnectionId);
        isGameOver = true;
        await CheckSolution();
        StateHasChanged();
    }


    private async Task UpdateCell(int row, int col, string value)
    {
        if (completedPlayers.Contains(hubConnection.ConnectionId)) return;

        int previousValue = board[row, col];

        if (int.TryParse(value, out int result) && result >= 1 && result <= 9)
        {
            board[row, col] = result;

            await hubConnection.SendAsync("UpdateCell", GamePin, PlayerName, row, col, result);

            if (board[row, col] == solution[row, col])
            {
                incorrectCells[row, col] = false;
                if (previousValue != solution[row, col])
                {
                    score += 10;
                    await UpdateScore(score);
                    await ShowPopup(true);
                }
            }
            else
            {
                incorrectCells[row, col] = true;
                score -= 10;
                await UpdateScore(score);
                incorrectAnswersCount++;
                await ShowPopup(false);
            }
        }
        else
        {
            if (previousValue == solution[row, col])
            {
                score -= 10;
                await UpdateScore(score);
            }
            board[row, col] = 0;
            incorrectCells[row, col] = false;
            await hubConnection.SendAsync("UpdateCell", GamePin, PlayerName, row, col, 0);
        }

        StateHasChanged();

        if (IsBoardFilled())
        {
            await CheckSolution();
        }
    }


    private async Task UpdateScore(int newScore)

    {

        score = newScore;

        await hubConnection.SendAsync("UpdateScore", GamePin, PlayerName, score);

    }

    private bool IsBoardFilled()
    {
        for (int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {
                if (board[i, j] == 0)
                {
                    return false;
                }
            }
        }
        return true;
    }

    private async Task CheckSolution()
    {
        incorrectCells = new bool[9, 9];
        bool isCorrect = true;

        for (int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {
                if (board[i, j] != solution[i, j])
                {
                    isCorrect = false;
                    incorrectCells[i, j] = true;
                }
            }
        }

        message = isCorrect ? "Congratulations! Your solution is correct!" : "There are some mistakes. Check the highlighted cells.";
        isSolved = isCorrect;

        if (isCorrect)
        {
            timer?.Dispose();
            completedPlayers.Add(hubConnection.ConnectionId);
            isGameOver = true;
            await hubConnection.SendAsync("PlayerCompletedGame", GamePin, "You");
        }
        else if (remainingTime <= TimeSpan.Zero)
        {
            timer?.Dispose();
            completedPlayers.Add(hubConnection.ConnectionId);
            isGameOver = true;
        }

        StateHasChanged();

        if (!isCorrect && !isGameOver)
        {
            await JSRuntime.InvokeVoidAsync("alert", message);
        }
        if (isCorrect)
        {
            timer?.Dispose();
            completedPlayers.Add(hubConnection.ConnectionId);
            isGameOver = true;
            await hubConnection.SendAsync("PlayerCompletedGame", GamePin, hubConnection.ConnectionId);
            await HandleGameCompletion();
        }
    }
    private async Task HandleGameCompletion()
    {
        completedPlayersCount++;
        if (completedPlayersCount == totalPlayers)
        {
            allPlayersCompleted = true;
            await hubConnection.SendAsync("AllPlayersCompleted", GamePin);
        }
        StateHasChanged();
    }
    private async Task ShowCompletionPopup(string playerName)
    {
        await InvokeAsync(() =>
        {
            completionMessage = $"{playerName} has completed the game!";
            showCompletionPopup = true;
            StateHasChanged();
        });
    }

    private async Task ExitGame()
    {
        await hubConnection.SendAsync("LeaveGame", GamePin);
        NavigationManager.NavigateTo("/");
    }



    private bool IsValid(int row, int col)
    {
        return !incorrectCells[row, col];
    }

    private int[,] GenerateRandomSudoku()
    {
        int[,] grid = new int[9, 9];
        FillDiagonal(grid);
        FillRemaining(grid, 0, 3);
        return grid;
    }

    private void FillDiagonal(int[,] grid)
    {
        for (int box = 0; box < 9; box += 3)
        {
            FillBox(grid, box, box);
        }
    }

    private void FillBox(int[,] grid, int row, int col)
    {
        int num;
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                do
                {
                    num = random.Next(1, 10);
                } while (!IsValid(grid, row, col, num));

                grid[row + i, col + j] = num;
            }
        }
    }

    private bool IsValid(int[,] grid, int row, int col, int num)
    {
        for (int x = 0; x < 9; x++)
        {
            if (grid[row, x] == num || grid[x, col] == num)
            {
                return false;
            }
        }

        int startRow = row - row % 3;
        int startCol = col - col % 3;
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (grid[i + startRow, j + startCol] == num)
                {
                    return false;
                }
            }
        }

        return true;
    }

    private void RemoveNumbers(int[,] grid, int count)
    {
        int cellsRemoved = 0;
        while (cellsRemoved < count)
        {
            int row = random.Next(9);
            int col = random.Next(9);
            if (grid[row, col] != 0)
            {
                grid[row, col] = 0;
                cellsRemoved++;
            }
        }
    }


    private bool FillRemaining(int[,] grid, int row, int col)
    {
        if (col >= 9 && row < 8)
        {
            row++;
            col = 0;
        }
        if (row >= 9 && col >= 9)
            return true;

        if (row < 3)
        {
            if (col < 3)
                col = 3;
        }
        else if (row < 6)
        {
            if (col == (row / 3) * 3)
                col += 3;
        }
        else
        {
            if (col == 6)
            {
                row++;
                col = 0;
                if (row >= 9)
                    return true;
            }
        }

        for (int num = 1; num <= 9; num++)
        {
            if (IsValid(grid, row, col, num))
            {
                grid[row, col] = num;
                if (FillRemaining(grid, row, col + 1))
                    return true;

                grid[row, col] = 0;
            }
        }
        return false;
    }

    private int[,] SolveSudoku(int[,] grid)
    {
        var solver = new SudokuSolver(grid);
        solver.Solve();
        return solver.Grid;
    }

    public async ValueTask DisposeAsync()
    {
        timer?.Dispose();
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public class SudokuSolver
    {
        public int[,] Grid { get; private set; }

        public SudokuSolver(int[,] grid)
        {
            Grid = (int[,])grid.Clone();
        }

        public bool Solve()
        {
            for (int row = 0; row < 9; row++)
            {
                for (int col = 0; col < 9; col++)
                {
                    if (Grid[row, col] == 0)
                    {
                        for (int num = 1; num <= 9; num++)
                        {
                            if (IsValid(row, col, num))
                            {
                                Grid[row, col] = num;

                                if (Solve())
                                    return true;

                                Grid[row, col] = 0;
                            }
                        }
                        return false;
                    }
                }
            }
            return true;
        }

        private bool IsValid(int row, int col, int num)
        {
            for (int x = 0; x < 9; x++)
                if (Grid[row, x] == num) return false;

            for (int x = 0; x < 9; x++)
                if (Grid[x, col] == num) return false;

            int startRow = row - row % 3;
            int startCol = col - col % 3;
            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 3; j++)
                    if (Grid[i + startRow, j + startCol] == num) return false;

            return true;
        }
    }

    private async Task ShowPopup(bool correct)
    {
        isCorrectAnswer = correct;
        showPopup = true;
        StateHasChanged();
        await Task.Delay(1500); // Show popup for 1.5 seconds
        showPopup = false;
        StateHasChanged();
    }

}

<style>
    body {
        margin: 0;
        padding: 0;
        background: linear-gradient(135deg, #1a237e 0%, #880E4F 100%);
        font-family: 'Roboto', sans-serif;
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .page-container {
        display: flex;
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .sidebar {
        width: 200px;
        margin-right: 20px;
        position: fixed;
        left: 20px;
        top: 50%;
        transform: translateY(-50%);
    }

    .game-container {
        flex-grow: 1;
        background-color: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 30px;
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        margin-left: 220px;
        transition: all 0.3s ease;
    }

        .game-container:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px 0 rgba(31, 38, 135, 0.5);
            background-color: rgba(255, 255, 255, 0.15);
        }

    h1 {
        text-align: center;
        color: #ffffff;
        font-family: 'Arial', sans-serif;
        margin-bottom: 20px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    .sudoku-grid {
        display: grid;
        grid-template-columns: repeat(9, 1fr);
        gap: 1px;
        width: 450px;
        border: 4px solid #ffffff;
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        overflow: hidden;
        margin: 0 auto;
    }

    .sudoku-row {
        display: contents;
    }

    .sudoku-input {
        width: 100%;
        height: 50px;
        text-align: center;
        font-size: 20px;
        border: 1px solid rgba(255, 255, 255, 0.3);
        background-color: rgba(255, 255, 255, 0.1);
        color: #ffffff;
        -moz-appearance: textfield;
        transition: all 0.3s ease;
    }

        .sudoku-input:hover {
            background-color: rgba(255, 255, 255, 0.3);
            transform: scale(1.05);
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
        }

        .sudoku-input::-webkit-inner-spin-button,
        .sudoku-input::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        /* 3x3 subgrid borders */
        .sudoku-input:nth-child(3n) {
            border-right: 2px solid rgba(255, 255, 255, 0.8);
        }

        .sudoku-input:nth-child(9n) {
            border-right: none;
        }

    .sudoku-row:nth-child(3n) .sudoku-input {
        border-bottom: 2px solid rgba(255, 255, 255, 0.8);
    }

    .sudoku-row:last-child .sudoku-input {
        border-bottom: none;
    }
    /* Thicker borders for 3x3 subgrids */
    .sudoku-input:nth-child(3n+1) {
        border-left: 2px solid rgba(255, 255, 255, 0.8);
    }

    .sudoku-row:nth-child(3n+1) .sudoku-input {
        border-top: 2px solid rgba(255, 255, 255, 0.8);
    }


    .invalid {
        background-color: rgba(255, 0, 0, 0.3) !important;
    }

    .default-number {
        color: #000000 !important;
        font-weight: bold;
    }

    .custom-button {
        margin-bottom: 10px;
        background-color: rgba(255, 255, 255, 0.1) !important;
        color: white !important;
        padding: 15px 32px !important;
        text-align: center !important;
        text-decoration: none !important;
        display: inline-block !important;
        font-size: 18px !important;
        transition: all 0.3s ease !important;
        border: 2px solid rgba(255, 255, 255, 0.5) !important;
        border-radius: 50px !important;
        width: 100%;
        backdrop-filter: blur(5px);
    }

        .custom-button:hover {
            background-color: #880E4F !important;
            transform: translateY(-2px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
        }

    .alert {
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        padding: 15px;
        border-radius: 5px;
        color: white;
        font-weight: bold;
        text-align: center;
        z-index: 1000;
    }

    .alert-success {
        background-color: rgba(76, 175, 80, 0.9);
    }

    .alert-danger {
        background-color: rgba(244, 67, 54, 0.9);
    }

    .timer {
        text-align: center;
        font-size: 24px;
        color: #ffffff;
        margin-bottom: 20px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    .invalid {
        background-color: rgba(255, 0, 0, 0.3) !important;
        border: 2px solid red !important;
    }

    .score {
        text-align: center;
        font-size: 24px;
        color: #ffffff;
        margin-bottom: 20px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    .game-stats {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .timer-critical {
        color: #ff0000 !important;
        animation: pulse 1s infinite;
    }

    ::deep keyframes pulse {
        0%

    {
        opacity: 1;
    }

    50% {
        opacity: 0.5;
    }

    100% {
        opacity: 1;
    }

    }

    .timer, .score, .incorrect-count {
        font-size: 18px;
        color: #ffffff;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        padding: 10px;
        border-radius: 10px;
        transition: all 0.3s ease;
    }

        .timer:hover, .score:hover, .incorrect-count:hover {
            background-color: rgba(255, 255, 255, 0.2);
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

    .incorrect-count {
        color: #ffffff;
    }

    .popup-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .popup-content {
        background-color: #880E4F;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
    }

        .popup-content h3 {
            margin-bottom: 20px;
            color: #333;
        }

    .all-player-scores, .player-score {
        color: #ffffff; /* This sets the text color to white */
    }

    .custom-button.exit-game {
        background-color: rgba(255, 255, 255, 0.1) !important;
        color: white !important;
        padding: 15px 32px !important;
        text-align: center !important;
        text-decoration: none !important;
        display: inline-block !important;
        font-size: 18px !important;
        transition: all 0.3s ease !important;
        border: 2px solid rgba(255, 255, 255, 0.5) !important;
        border-radius: 50px !important;
        width: auto;
        margin-top: 20px;
        backdrop-filter: blur(5px);
    }

        .custom-button.exit-game:hover {
            background-color: rgba(255, 255, 255, 0.2) !important;
            transform: translateY(-2px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
        }

    .button-container {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 20px;
    }


    .all-player-scores {
        background-color: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

        .all-player-scores h4 {
            color: #ffffff;
            margin-bottom: 15px;
            text-align: center;
            font-size: 1.2em;
        }

    .player-scores-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 10px;
    }

    .player-score-cell {
        background-color: rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        padding: 10px;
        text-align: center;
        transition: all 0.3s ease;
    }

        .player-score-cell:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .player-score-cell span {
            color: #ffffff;
            font-size: 0.9em;
        }

    .player-name {
        color: #ffffff;
        font-size: 1em;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .player-score {
        color: #ffffff;
        font-size: 0.9em;
    }

    .all-player-scores:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }

    .player-score-cell:nth-child(1) {
        background-color: rgba(255, 255, 255, 0.1);
        border: 2px solid #76FF03;
    }

    .player-score-cell:nth-child(2) {
        background-color: rgba(255, 255, 255, 0.1);
        border: 2px solid #FFB74D;
    }

    .player-score-cell:nth-child(3) {
        background-color: rgba(255, 255, 255, 0.1);
        border: 2px solid red;
    }

    .player-rank {
        position: absolute;
        top: 5px;
        left: 5px;
        font-size: 0.8em;
        font-weight: bold;
        background-color: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .player-score-cell {
        position: relative;
    }


    .popup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0,0,0,0.3);
        z-index: 1000;
        text-align: center;
    }

    .emoji {
        font-size: 50px;
        display: block;
        margin-bottom: 10px;
    }
    .popup p {
        margin: 0;
        font-size: 18px;
        font-weight: bold;
    }

</style>